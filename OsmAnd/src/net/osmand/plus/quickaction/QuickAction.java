package net.osmand.plus.quickaction;


import android.content.Context;
import android.support.annotation.DrawableRes;
import android.support.annotation.StringRes;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;

import net.osmand.plus.OsmandApplication;
import net.osmand.plus.activities.MapActivity;

import java.util.HashMap;
import java.util.List;

public class QuickAction {

    public enum QuickActionType {
        QUICK_ACTION_HEADER                 (0),
        NEW_ACTION                          (1),
        MARKER_ACTION                       (2),
        FAVORITE_ACTION                     (3),
        SHOW_HIDE_FAVORITES_ACTION          (4),
        SHOW_HIDE_POI_ACTION                (5),
        GPX_ACTION                          (6),
        PARKING_ACTION                      (7),
        TAKE_AUDIO_NOTE_ACTION              (8),
        TAKE_VIDEO_NOTE_ACTION              (9),
        TAKE_PHOTO_NOTE_ACTION              (10),
        NAV_VOICE_ACTION                    (11),
        ADD_OSM_BUG_ACTION                  (12),
        ADD_POI_ACTION                      (13),
        MAP_STYLE_ACTION                    (14),
        MAP_OVERLAY_ACTION                  (15),
        MAP_UNDERLAY_ACTION                 (16),
        MAP_SOURCE_ACTION                   (17),
        NAV_ADD_DESTINATION_ACTION          (20),
        NAV_REPLACE_DESTINATION_ACTION      (21),
        NAV_ADD_FIRST_INTERMEDIATE_ACTION   (22),
        NAV_AUTO_ZOOM_MAP_ACTION            (23),
        SHOW_HIDE_OSM_BUG_ACTION            (24),
        NAV_START_STOP_ACTION               (25),
        NAV_RESUME_PAUSE_ACTION             (26),
        NAV_AUTO_CENTER_MAP_ACTION          (28),
        DAY_NIGHT_MODE_ACTION               (29),
        SHOW_HIDE_GPX_TRACKS_ACTION         (30);

        private final int value;

        QuickActionType(int value) {
            this.value = value;
        }

        public int toInt() { return value; }

        private static final QuickActionType[] typeValues = QuickActionType.values();

        public static QuickActionType fromInt(int intValue) {
            for (QuickActionType type : typeValues) {
                if (type.toInt() == intValue) {
                    return type;
                }
            }
            return null;
        }
    }

    public interface QuickActionSelectionListener {

        void onActionSelected(QuickAction action);
    }

    protected QuickActionType type;
    protected long id;

    private @StringRes int nameRes;
    private @DrawableRes int iconRes;
    private boolean isActionEditable;

    private String name;
    private HashMap<String, String> params;

    protected QuickAction() {
        this.id = System.currentTimeMillis();
        this.type = QuickActionType.QUICK_ACTION_HEADER;
    }

    protected QuickAction(QuickActionType type, int nameRes) {
        this.id = System.currentTimeMillis();
        this.nameRes = nameRes;
        this.type = type;
    }

    protected QuickAction(QuickActionType type) {
        this.id = System.currentTimeMillis();
        this.type = type;
        this.nameRes = QuickActionFactory.getActionName(type);
        this.iconRes = QuickActionFactory.getActionIcon(type);
        this.isActionEditable = QuickActionFactory.isActionEditable(type);
    }

    public QuickAction(QuickAction quickAction) {
        this.type = quickAction.type;
        this.id = quickAction.id;
        this.name = quickAction.name;
        this.params = quickAction.params;

        this.nameRes = QuickActionFactory.getActionName(type);
        this.iconRes = QuickActionFactory.getActionIcon(type);
        this.isActionEditable = QuickActionFactory.isActionEditable(type);
    }

    public int getNameRes() {
        return nameRes;
    }

    public int getIconRes() {
        return iconRes;
    }

    public int getIconRes(Context context) {
        return iconRes;
    }

    public long getId() {
        return id;
    }

	public long getType() {
		return type.toInt();
	}

    public boolean isActionEditable() {
        return isActionEditable;
    }

    public boolean isActionEnable(OsmandApplication app) {
        return true;
    }

    public String getName(Context context) {
        return name == null || name.isEmpty() ? nameRes > 0 ? context.getString(nameRes) : "" : name;
    }

    public HashMap<String, String> getParams() {

        if (params == null) params = new HashMap<>();

        return params;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setParams(HashMap<String, String> params) {
        this.params = params;
    }

    public boolean isActionWithSlash(OsmandApplication application){
        return false;
    }

    public String getActionText(OsmandApplication application){
        return getName(application);
    }

    public void setAutoGeneratedTitle(EditText title){
    }

    public void execute(MapActivity activity){};
    public void drawUI(ViewGroup parent, MapActivity activity){};
    public boolean fillParams(View root, MapActivity activity){ return true; };

    public boolean hasInstanceInList(List<QuickAction> active){

        for (QuickAction action: active){
            if (action.type == type) return true;
        }

        return false;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;

        if (o instanceof QuickAction) {

            QuickAction action = (QuickAction) o;

            if (type != action.type) return false;
            if (id != action.id) return false;

            return true;

        } else return false;
    }

    @Override
    public int hashCode() {
        int result = type.toInt();
        result = 31 * result + (int) (id ^ (id >>> 32));
        result = 31 * result + nameRes;
        result = 31 * result + iconRes;
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }
}

